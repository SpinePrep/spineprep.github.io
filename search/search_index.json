{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SpinePrepSpinal Cord Preprocessing Pipeline","text":"<p>     A robust, BIDS-compliant preprocessing pipeline for spinal cord neuroimaging data.     Built for reproducibility, transparency, and scientific rigor.   </p> <p>\u27a1\ufe0f Live Docs</p> <p>Under Development</p> <p>SpinePrep is not ready for production use. Interfaces, outputs, and methods may change without notice. Do not rely on this software for research or clinical decisions.</p> <p>You're viewing latest. For citeable, frozen docs see stable. Browse other versions from the selector in the header.</p> <p> </p>"},{"location":"#why-spineprep","title":"Why SpinePrep?","text":"<p>SpinePrep provides a comprehensive preprocessing pipeline specifically designed for spinal cord neuroimaging data. Unlike generic brain preprocessing tools, SpinePrep understands the unique challenges of spinal cord imaging:</p> <ul> <li>Spinal cord-specific preprocessing: Optimized for the anatomical and physiological characteristics of spinal cord data</li> <li>BIDS compliance: Full support for the Brain Imaging Data Structure standard</li> <li>Quality control: Comprehensive QC metrics including FD, DVARS, and aCompCor</li> <li>Reproducible science: Version-controlled, containerized, and fully documented</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with SpinePrep in three simple steps:</p>"},{"location":"#1-install","title":"1. Install","text":"<pre><code>pip install spineprep\n</code></pre>"},{"location":"#2-configure","title":"2. Configure","text":"<p>Create a minimal configuration file:</p> <pre><code># config.yaml\nbids_dir: /path/to/bids\noutput_dir: /path/to/output\n</code></pre>"},{"location":"#3-run","title":"3. Run","text":"<pre><code>spineprep config.yaml\n</code></pre>"},{"location":"#sample-report","title":"Sample Report","text":"<p>See what SpinePrep produces:</p> <ul> <li> <p> Quality Control</p> <p>Comprehensive QC metrics including motion, signal quality, and preprocessing artifacts</p> <p> View QC Report</p> </li> <li> <p> Processing Pipeline</p> <p>Transparent, versioned processing steps with full provenance tracking</p> <p> View DAG</p> </li> <li> <p> BIDS Derivatives</p> <p>Standardized outputs following BIDS-Derivatives specification</p> <p> View Outputs</p> </li> </ul>"},{"location":"#whats-new","title":"What's new","text":"<p>See recent changes and release notes in the Changelog.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p> Spinal cord\u2013optimized \u2014 Preprocessing tailored to cord anatomy/physiology (cord-aware motion correction, SCT-guided registration).</p> </li> <li> <p> BIDS compliant \u2014 Full BIDS-Derivatives outputs for seamless downstream use.</p> </li> <li> <p> Quality control \u2014 FD, DVARS, aCompCor, censor masks, and rich HTML QC with overlays.</p> </li> <li> <p> Reproducible \u2014 Version-locked, provenance-rich runs; containerized and parameter-transparent.</p> </li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 User Guide - Learn how to use SpinePrep</li> <li>\ud83d\udd27 Configuration Reference - Complete configuration options</li> <li>\ud83d\udc1b Report Issues - Found a bug?</li> <li>\ud83d\udcac Discussions - Ask questions</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>If you use SpinePrep in your research, please cite:</p> <pre><code>@software{spineprep2024,\n  title={SpinePrep: Spinal Cord Preprocessing Pipeline},\n  author={SpinePrep Contributors},\n  year={2024},\n  url={https://github.com/spineprep/spineprep}\n}\n</code></pre>"},{"location":"404/","title":"Page not found","text":"<p>The page you are looking for does not exist. Use the search box or go to the home page.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>Coming soon.</p>"},{"location":"contributing/","title":"Contributing to SpinePrep","text":"<p>Thank you for your interest in contributing to SpinePrep! This guide will help you get started with development, understand our processes, and make your first contribution.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Git</li> <li>FSL (version 6.0+)</li> <li>Spinal Cord Toolbox (SCT)</li> <li>Docker (optional, for containerized development)</li> </ul>"},{"location":"contributing/#installation","title":"Installation","text":"<ol> <li> <p>Fork and clone the repository:    <pre><code>git clone https://github.com/your-username/spineprep.git\ncd spineprep\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install in development mode:    <pre><code>pip install -e .\npip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Install pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-environment","title":"Development Environment","text":"<pre><code># Install development dependencies\npip install -r requirements-dev.txt\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests\npytest\n\n# Run linting\nruff check .\nruff format .\n\n# Run type checking\nmypy spineprep/\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#branch-naming","title":"Branch Naming","text":"<p>Use the following branch naming convention:</p> <pre><code>feat/spi-###-&lt;kebab-slug&gt;\nfix/spi-###-&lt;kebab-slug&gt;\ndocs/spi-###-&lt;kebab-slug&gt;\n</code></pre> <p>Examples: - <code>feat/spi-011-docs-site</code> - <code>fix/spi-012-motion-bug</code> - <code>docs/spi-013-api-docs</code></p>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow the Conventional Commits specification:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;imperative summary&gt;  [spi-###]\n</code></pre> <p>Examples: - <code>feat(confounds): add motion regressors  [spi-042]</code> - <code>fix(registration): correct template path  [spi-043]</code> - <code>docs(api): add function documentation  [spi-044]</code></p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feat/spi-###-your-feature\n</code></pre></p> </li> <li> <p>Make your changes:</p> </li> <li>Write code following our style guidelines</li> <li>Add tests for new functionality</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Run tests and linting:    <pre><code>pytest\nruff check .\nruff format .\nmypy spineprep/\n</code></pre></p> </li> <li> <p>Commit your changes:    <pre><code>git add .\ngit commit -m \"feat(scope): your change description  [spi-###]\"\n</code></pre></p> </li> <li> <p>Push and create a pull request:    <pre><code>git push origin feat/spi-###-your-feature\n</code></pre></p> </li> </ol>"},{"location":"contributing/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"contributing/#python-code","title":"Python Code","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all functions</li> <li>Write docstrings for all public functions</li> <li>Use meaningful variable names</li> <li>Keep functions small and focused</li> </ul>"},{"location":"contributing/#example","title":"Example","text":"<pre><code>def calculate_framewise_displacement(\n    motion_params: np.ndarray,\n    radius: float = 50.0\n) -&gt; np.ndarray:\n    \"\"\"Calculate framewise displacement from motion parameters.\n\n    Args:\n        motion_params: Motion parameters (6 columns: 3 translation, 3 rotation)\n        radius: Head radius for rotation to translation conversion\n\n    Returns:\n        Framewise displacement values\n    \"\"\"\n    # Implementation here\n    pass\n</code></pre>"},{"location":"contributing/#configuration-files","title":"Configuration Files","text":"<ul> <li>Use YAML for configuration files</li> <li>Follow consistent indentation (2 spaces)</li> <li>Use descriptive key names</li> <li>Include comments for complex options</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Use Markdown for documentation</li> <li>Follow the existing documentation structure</li> <li>Include code examples</li> <li>Use clear, concise language</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/           # Unit tests\n\u251c\u2500\u2500 integration/    # Integration tests\n\u2514\u2500\u2500 fixtures/       # Test data and configurations\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<pre><code>def test_calculate_framewise_displacement():\n    \"\"\"Test framewise displacement calculation.\"\"\"\n    # Arrange\n    motion_params = np.array([[0, 0, 0, 0, 0, 0],\n                             [1, 1, 1, 0.1, 0.1, 0.1]])\n\n    # Act\n    fd = calculate_framewise_displacement(motion_params)\n\n    # Assert\n    assert len(fd) == 1\n    assert fd[0] &gt; 0\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/unit/test_motion.py\n\n# Run with coverage\npytest --cov=spineprep\n\n# Run integration tests\npytest tests/integration/\n</code></pre>"},{"location":"contributing/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"contributing/#github-actions","title":"GitHub Actions","text":"<p>Our CI pipeline includes:</p> <ol> <li>Code Quality:</li> <li>Linting with <code>ruff</code></li> <li>Formatting with <code>ruff format</code></li> <li> <p>Type checking with <code>mypy</code></p> </li> <li> <p>Testing:</p> </li> <li>Unit tests with <code>pytest</code></li> <li>Integration tests</li> <li> <p>Coverage reporting</p> </li> <li> <p>Documentation:</p> </li> <li>Build documentation with <code>mkdocs</code></li> <li>Check links with <code>lychee</code></li> <li> <p>Spell checking with <code>codespell</code></p> </li> <li> <p>Deployment:</p> </li> <li>Build and test Docker images</li> <li>Deploy documentation to GitHub Pages</li> </ol>"},{"location":"contributing/#required-checks","title":"Required Checks","text":"<p>All pull requests must pass:</p> <ul> <li> Code linting (<code>ruff check .</code>)</li> <li> Code formatting (<code>ruff format .</code>)</li> <li> Type checking (<code>mypy spineprep/</code>)</li> <li> Unit tests (<code>pytest tests/unit/</code>)</li> <li> Integration tests (<code>pytest tests/integration/</code>)</li> <li> Documentation build (<code>mkdocs build --strict</code>)</li> <li> Link checking (<code>lychee docs/</code>)</li> </ul>"},{"location":"contributing/#documentation_1","title":"Documentation","text":""},{"location":"contributing/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md              # Landing page\n\u251c\u2500\u2500 getting-started.md     # Installation and quick start\n\u251c\u2500\u2500 user-guide/           # User documentation\n\u251c\u2500\u2500 reference/            # API and configuration reference\n\u251c\u2500\u2500 how-tos/              # Tutorials and guides\n\u251c\u2500\u2500 contributing.md       # This file\n\u2514\u2500\u2500 CHANGELOG.md          # Release notes\n</code></pre>"},{"location":"contributing/#writing-documentation","title":"Writing Documentation","text":"<ol> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Provide context and motivation</li> <li>Use consistent formatting</li> <li>Include screenshots for complex procedures</li> </ol>"},{"location":"contributing/#documentation-build","title":"Documentation Build","text":"<pre><code># Build documentation locally\nmkdocs serve\n\n# Build for production\nmkdocs build --strict\n\n# Check links\nlychee docs/\n</code></pre>"},{"location":"contributing/#release-process","title":"Release Process","text":""},{"location":"contributing/#version-numbering","title":"Version Numbering","text":"<p>We use semantic versioning (MAJOR.MINOR.PATCH):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes (backward compatible)</li> </ul>"},{"location":"contributing/#release-checklist","title":"Release Checklist","text":"<ul> <li> Update version in <code>pyproject.toml</code></li> <li> Update <code>CHANGELOG.md</code></li> <li> Run full test suite</li> <li> Build documentation</li> <li> Create release tag</li> <li> Publish to PyPI</li> <li> Update documentation</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":""},{"location":"contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: Questions and general discussion</li> <li>Email: Contact maintainers directly</li> </ul>"},{"location":"contributing/#asking-questions","title":"Asking Questions","text":"<p>When asking questions, please include:</p> <ol> <li>SpinePrep version: <code>spineprep --version</code></li> <li>Python version: <code>python --version</code></li> <li>Operating system: <code>uname -a</code></li> <li>Error messages: Full error traceback</li> <li>Configuration: Relevant configuration files</li> <li>Data information: BIDS structure and data characteristics</li> </ol>"},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>When reporting bugs, please include:</p> <ol> <li>Clear description of the problem</li> <li>Steps to reproduce the issue</li> <li>Expected behavior vs. actual behavior</li> <li>Environment information (OS, Python, dependencies)</li> <li>Configuration files (anonymized)</li> <li>Error logs and tracebacks</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":""},{"location":"contributing/#our-pledge","title":"Our Pledge","text":"<p>We are committed to providing a welcoming and inclusive environment for all contributors, regardless of:</p> <ul> <li>Age, body size, disability, ethnicity</li> <li>Gender identity and expression</li> <li>Level of experience, education</li> <li>Nationality, personal appearance</li> <li>Race, religion, sexual orientation</li> </ul>"},{"location":"contributing/#expected-behavior","title":"Expected Behavior","text":"<ul> <li>Use welcoming and inclusive language</li> <li>Be respectful of differing viewpoints</li> <li>Accept constructive criticism gracefully</li> <li>Focus on what's best for the community</li> <li>Show empathy towards other community members</li> </ul>"},{"location":"contributing/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<ul> <li>Harassment, trolling, or insulting comments</li> <li>Public or private harassment</li> <li>Publishing private information without permission</li> <li>Inappropriate sexual attention or advances</li> <li>Other unprofessional conduct</li> </ul>"},{"location":"contributing/#recognition","title":"Recognition","text":""},{"location":"contributing/#contributors","title":"Contributors","text":"<p>We recognize all contributors in our documentation and release notes. Contributors are listed in:</p> <ul> <li><code>CONTRIBUTORS.md</code></li> <li>Release notes</li> <li>Documentation acknowledgments</li> </ul>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":"<p>We welcome many types of contributions:</p> <ul> <li>Code: Bug fixes, new features, performance improvements</li> <li>Documentation: User guides, API documentation, tutorials</li> <li>Testing: Test cases, test data, test infrastructure</li> <li>Design: User interface, user experience, accessibility</li> <li>Community: Helping others, answering questions, mentoring</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to SpinePrep, you agree that your contributions will be licensed under the same license as the project (see <code>LICENSE</code> file).</p>"},{"location":"contributing/#thank-you","title":"Thank You","text":"<p>Thank you for contributing to SpinePrep! Your contributions help make spinal cord neuroimaging more accessible and reproducible for the entire community.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with SpinePrep quickly.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>SpinePrep requires Python 3.8+ and the following system dependencies:</p> <ul> <li>FSL (version 6.0+)</li> <li>Spinal Cord Toolbox (SCT)</li> <li>ANTs (optional, for advanced registration)</li> </ul>"},{"location":"getting-started/#install-spineprep","title":"Install SpinePrep","text":"<pre><code># Install from PyPI (recommended)\npip install spineprep\n\n# Or install from source\ngit clone https://github.com/spineprep/spineprep.git\ncd spineprep\npip install -e .\n</code></pre>"},{"location":"getting-started/#verify-installation","title":"Verify Installation","text":"<pre><code>spineprep --version\n</code></pre>"},{"location":"getting-started/#minimal-example","title":"Minimal Example","text":"<p>Here's the simplest way to run SpinePrep:</p>"},{"location":"getting-started/#1-prepare-your-data","title":"1. Prepare Your Data","text":"<p>Ensure your data follows the BIDS specification:</p> <pre><code>bids/\n\u251c\u2500\u2500 dataset_description.json\n\u251c\u2500\u2500 participants.tsv\n\u2514\u2500\u2500 sub-01/\n    \u251c\u2500\u2500 func/\n    \u2502   \u2514\u2500\u2500 sub-01_task-rest_bold.nii.gz\n    \u2514\u2500\u2500 anat/\n        \u2514\u2500\u2500 sub-01_T2w.nii.gz\n</code></pre>"},{"location":"getting-started/#2-create-configuration","title":"2. Create Configuration","text":"<p>Create a minimal configuration file:</p> <pre><code># config.yaml\nbids_dir: /path/to/your/bids\noutput_dir: /path/to/output\n</code></pre>"},{"location":"getting-started/#3-run-spineprep","title":"3. Run SpinePrep","text":"<pre><code>spineprep config.yaml\n</code></pre>"},{"location":"getting-started/#configuration-profiles","title":"Configuration Profiles","text":"<p>SpinePrep supports different execution profiles for various computing environments.</p>"},{"location":"getting-started/#local-profile","title":"Local Profile","text":"<p>For running on your local machine:</p> <pre><code># profiles/local/config.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\nn_procs: 4\nmemory_gb: 8\n</code></pre>"},{"location":"getting-started/#slurm-profile","title":"SLURM Profile","text":"<p>For HPC clusters with SLURM:</p> <pre><code># profiles/slurm/config.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\nexecution:\n  backend: slurm\n  slurm:\n    account: your_account\n    partition: compute\n    time: \"2:00:00\"\n    mem: \"8G\"\n    cpus: 4\n</code></pre>"},{"location":"getting-started/#docker-profile","title":"Docker Profile","text":"<p>For containerized execution:</p> <pre><code># profiles/docker/config.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\nexecution:\n  backend: docker\n  docker:\n    image: spineprep/spineprep:latest\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have SpinePrep running, explore:</p> <ul> <li>User Guide - Learn about advanced configuration and usage</li> <li>Outputs - Understand what SpinePrep produces</li> <li>Quality Control - Learn about QC metrics and reports</li> <li>Configuration Reference - Complete configuration options</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>Issue: <code>spineprep: command not found</code> Solution: Ensure SpinePrep is installed and in your PATH. Try <code>pip install --user spineprep</code> or activate your virtual environment.</p> <p>Issue: <code>FSL not found</code> Solution: Install FSL and ensure it's in your PATH. On Ubuntu/Debian: <code>sudo apt install fsl-complete</code>.</p> <p>Issue: <code>SCT not found</code> Solution: Install Spinal Cord Toolbox following the official instructions.</p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Check the troubleshooting section</li> <li>Search existing issues</li> <li>Ask a question in discussions</li> </ul>"},{"location":"how-tos/grouped-motion/","title":"Grouped Motion Analysis","text":"<p>This guide explains how to perform grouped motion analysis across multiple subjects and sessions using SpinePrep.</p>"},{"location":"how-tos/grouped-motion/#overview","title":"Overview","text":"<p>Grouped motion analysis allows you to:</p> <ul> <li>Compare motion patterns across subjects</li> <li>Identify systematic motion issues</li> <li>Generate group-level QC reports</li> <li>Perform motion-based quality control</li> </ul>"},{"location":"how-tos/grouped-motion/#configuration","title":"Configuration","text":""},{"location":"how-tos/grouped-motion/#basic-grouped-analysis","title":"Basic Grouped Analysis","text":"<pre><code># config_grouped.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\n\n# Grouped motion analysis\ngrouped_motion:\n  enabled: true\n  subjects: [\"sub-01\", \"sub-02\", \"sub-03\"]\n  sessions: [\"ses-01\", \"ses-02\"]\n  tasks: [\"rest\", \"task\"]\n  runs: [\"run-01\", \"run-02\"]\n</code></pre>"},{"location":"how-tos/grouped-motion/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># config_grouped_advanced.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\n\n# Grouped motion analysis\ngrouped_motion:\n  enabled: true\n  subjects: [\"sub-01\", \"sub-02\", \"sub-03\"]\n  sessions: [\"ses-01\", \"ses-02\"]\n  tasks: [\"rest\", \"task\"]\n  runs: [\"run-01\", \"run-02\"]\n\n  # Motion parameters\n  motion:\n    fd_threshold: 0.5\n    dvars_threshold: 75\n    scrub: true\n\n  # Group analysis\n  group_analysis:\n    mean_fd: true\n    max_fd: true\n    outlier_percentage: true\n    motion_summary: true\n\n  # Output options\n  output:\n    group_report: true\n    individual_reports: true\n    motion_plots: true\n    quality_metrics: true\n</code></pre>"},{"location":"how-tos/grouped-motion/#grouped-motion-metrics","title":"Grouped Motion Metrics","text":""},{"location":"how-tos/grouped-motion/#individual-metrics","title":"Individual Metrics","text":"<p>For each subject/session/task/run:</p> <ul> <li>Mean FD: Average framewise displacement</li> <li>Max FD: Maximum framewise displacement</li> <li>Outlier percentage: Percentage of time points above threshold</li> <li>Motion summary: Overall motion quality score</li> </ul>"},{"location":"how-tos/grouped-motion/#group-metrics","title":"Group Metrics","text":"<p>Across all subjects:</p> <ul> <li>Group mean FD: Average motion across group</li> <li>Group max FD: Maximum motion across group</li> <li>Motion distribution: Distribution of motion metrics</li> <li>Quality ranking: Subjects ranked by motion quality</li> </ul>"},{"location":"how-tos/grouped-motion/#output-files","title":"Output Files","text":""},{"location":"how-tos/grouped-motion/#group-report","title":"Group Report","text":"<p>File: <code>group_motion_report.html</code></p> <p>Interactive HTML report containing:</p> <ul> <li>Group motion summary</li> <li>Individual subject metrics</li> <li>Motion distribution plots</li> <li>Quality rankings</li> <li>Recommendations</li> </ul>"},{"location":"how-tos/grouped-motion/#individual-reports","title":"Individual Reports","text":"<p>File: <code>sub-{id}_ses-{id}_motion_report.html</code></p> <p>Individual motion reports for each subject/session combination.</p>"},{"location":"how-tos/grouped-motion/#motion-plots","title":"Motion Plots","text":"<p>File: <code>group_motion_plots.png</code></p> <p>Visualization of:</p> <ul> <li>FD distribution across group</li> <li>DVARS distribution across group</li> <li>Motion over time for each subject</li> <li>Quality metric comparisons</li> </ul>"},{"location":"how-tos/grouped-motion/#quality-control","title":"Quality Control","text":""},{"location":"how-tos/grouped-motion/#group-level-qc","title":"Group-Level QC","text":"<p>SpinePrep performs group-level quality control:</p> <ol> <li>Motion distribution analysis: Identify outliers</li> <li>Quality ranking: Rank subjects by motion quality</li> <li>Systematic issues: Detect systematic motion problems</li> <li>Recommendations: Suggest data exclusion or reprocessing</li> </ol>"},{"location":"how-tos/grouped-motion/#quality-thresholds","title":"Quality Thresholds","text":"<pre><code>grouped_motion:\n  quality:\n    mean_fd_threshold: 0.3\n    max_fd_threshold: 1.0\n    outlier_threshold: 10\n    group_outlier_threshold: 2.0\n</code></pre>"},{"location":"how-tos/grouped-motion/#quality-assessment","title":"Quality Assessment","text":"<pre><code># Group motion analysis\ngroup_motion = analyze_group_motion(\n    subjects=subjects,\n    sessions=sessions,\n    tasks=tasks,\n    runs=runs\n)\n\n# Quality assessment\nquality_scores = assess_motion_quality(group_motion)\noutliers = identify_motion_outliers(group_motion)\nrecommendations = generate_recommendations(group_motion)\n</code></pre>"},{"location":"how-tos/grouped-motion/#motion-analysis-methods","title":"Motion Analysis Methods","text":""},{"location":"how-tos/grouped-motion/#descriptive-statistics","title":"Descriptive Statistics","text":"<pre><code># Calculate group statistics\ngroup_stats = {\n    'mean_fd': group_motion['fd'].mean(),\n    'std_fd': group_motion['fd'].std(),\n    'median_fd': group_motion['fd'].median(),\n    'iqr_fd': group_motion['fd'].quantile(0.75) - group_motion['fd'].quantile(0.25)\n}\n</code></pre>"},{"location":"how-tos/grouped-motion/#outlier-detection","title":"Outlier Detection","text":"<pre><code># Identify motion outliers\nfd_outliers = group_motion['fd'] &gt; (group_motion['fd'].mean() + 2 * group_motion['fd'].std())\ndvars_outliers = group_motion['dvars'] &gt; (group_motion['dvars'].mean() + 2 * group_motion['dvars'].std())\n</code></pre>"},{"location":"how-tos/grouped-motion/#quality-ranking","title":"Quality Ranking","text":"<pre><code># Rank subjects by motion quality\nquality_scores = calculate_quality_scores(group_motion)\nsubject_ranking = quality_scores.sort_values('overall_score', ascending=False)\n</code></pre>"},{"location":"how-tos/grouped-motion/#visualization","title":"Visualization","text":""},{"location":"how-tos/grouped-motion/#motion-distribution-plots","title":"Motion Distribution Plots","text":"<p>SpinePrep generates distribution plots:</p> <ul> <li>FD histogram: Distribution of framewise displacement</li> <li>DVARS histogram: Distribution of DVARS values</li> <li>Box plots: Motion metrics across subjects</li> <li>Scatter plots: Motion vs. other metrics</li> </ul>"},{"location":"how-tos/grouped-motion/#time-series-plots","title":"Time Series Plots","text":"<ul> <li>FD over time: Motion patterns across runs</li> <li>DVARS over time: Signal stability patterns</li> <li>Group comparisons: Motion across subjects</li> </ul>"},{"location":"how-tos/grouped-motion/#quality-plots","title":"Quality Plots","text":"<ul> <li>Quality scores: Overall quality assessment</li> <li>Outlier identification: Subjects with poor motion</li> <li>Recommendations: Data exclusion suggestions</li> </ul>"},{"location":"how-tos/grouped-motion/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-tos/grouped-motion/#common-issues","title":"Common Issues","text":"<p>Issue: No grouped motion data found Solutions: - Check subject/session/task/run specifications - Verify BIDS structure - Check file permissions</p> <p>Issue: Inconsistent motion metrics Solutions: - Check preprocessing parameters - Verify motion correction settings - Check for systematic issues</p> <p>Issue: Poor group quality Solutions: - Review acquisition parameters - Check for systematic motion issues - Consider data exclusion</p>"},{"location":"how-tos/grouped-motion/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed grouped motion analysis:</p> <pre><code>spineprep --debug config_grouped.yaml\n</code></pre> <p>This will show: - Subject/session/task/run selection - Motion metric calculations - Group analysis steps - Quality assessment details</p>"},{"location":"how-tos/grouped-motion/#best-practices","title":"Best Practices","text":""},{"location":"how-tos/grouped-motion/#data-collection","title":"Data Collection","text":"<ol> <li>Consistent acquisition: Use consistent acquisition parameters</li> <li>Motion monitoring: Monitor motion during acquisition</li> <li>Quality control: Perform real-time quality control</li> <li>Documentation: Document any acquisition issues</li> </ol>"},{"location":"how-tos/grouped-motion/#processing","title":"Processing","text":"<ol> <li>Consistent preprocessing: Use consistent preprocessing parameters</li> <li>Motion correction: Apply appropriate motion correction</li> <li>Quality assessment: Assess motion quality for each subject</li> <li>Group analysis: Perform group-level quality control</li> </ol>"},{"location":"how-tos/grouped-motion/#analysis","title":"Analysis","text":"<ol> <li>Motion inclusion: Include motion as a covariate</li> <li>Quality control: Exclude poor quality data</li> <li>Group analysis: Consider group-level motion effects</li> <li>Validation: Verify motion correction effectiveness</li> </ol>"},{"location":"how-tos/grouped-motion/#example-workflow","title":"Example Workflow","text":""},{"location":"how-tos/grouped-motion/#complete-example","title":"Complete Example","text":"<pre><code># config_grouped_complete.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\n\n# Grouped motion analysis\ngrouped_motion:\n  enabled: true\n  subjects: [\"sub-01\", \"sub-02\", \"sub-03\", \"sub-04\", \"sub-05\"]\n  sessions: [\"ses-01\", \"ses-02\"]\n  tasks: [\"rest\", \"task\"]\n  runs: [\"run-01\", \"run-02\"]\n\n  # Motion parameters\n  motion:\n    fd_threshold: 0.5\n    dvars_threshold: 75\n    scrub: true\n\n  # Group analysis\n  group_analysis:\n    mean_fd: true\n    max_fd: true\n    outlier_percentage: true\n    motion_summary: true\n\n  # Quality control\n  quality:\n    mean_fd_threshold: 0.3\n    max_fd_threshold: 1.0\n    outlier_threshold: 10\n    group_outlier_threshold: 2.0\n\n  # Output options\n  output:\n    group_report: true\n    individual_reports: true\n    motion_plots: true\n    quality_metrics: true\n</code></pre>"},{"location":"how-tos/grouped-motion/#running-grouped-analysis","title":"Running Grouped Analysis","text":"<pre><code># Run grouped motion analysis\nspineprep config_grouped_complete.yaml\n\n# Check grouped outputs\nls derivatives/spineprep/group_motion/\n</code></pre>"},{"location":"how-tos/grouped-motion/#using-grouped-results","title":"Using Grouped Results","text":"<pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load group motion data\ngroup_motion = pd.read_csv('group_motion_summary.tsv', sep='\\t')\n\n# Plot motion distribution\nplt.figure(figsize=(10, 6))\nplt.hist(group_motion['mean_fd'], bins=20, alpha=0.7)\nplt.xlabel('Mean FD (mm)')\nplt.ylabel('Number of subjects')\nplt.title('Group Motion Distribution')\nplt.show()\n\n# Identify outliers\noutliers = group_motion[group_motion['mean_fd'] &gt; 0.5]\nprint(f\"Found {len(outliers)} subjects with high motion\")\n\n# Generate recommendations\nfor _, subject in outliers.iterrows():\n    print(f\"Subject {subject['participant_id']}: Consider exclusion or reprocessing\")\n</code></pre>"},{"location":"how-tos/grouped-motion/#advanced-features","title":"Advanced Features","text":""},{"location":"how-tos/grouped-motion/#motion-based-grouping","title":"Motion-Based Grouping","text":"<pre><code># Group subjects by motion quality\ngrouped_motion:\n  grouping:\n    low_motion: \"mean_fd &lt; 0.2\"\n    moderate_motion: \"mean_fd &gt;= 0.2 and mean_fd &lt; 0.5\"\n    high_motion: \"mean_fd &gt;= 0.5\"\n</code></pre>"},{"location":"how-tos/grouped-motion/#motion-based-quality-control","title":"Motion-Based Quality Control","text":"<pre><code># Automatic quality control\ngrouped_motion:\n  quality_control:\n    auto_exclude: true\n    exclusion_threshold: 0.5\n    reprocess_threshold: 0.3\n</code></pre>"},{"location":"how-tos/grouped-motion/#motion-based-analysis","title":"Motion-Based Analysis","text":"<pre><code># Motion-based analysis\ngrouped_motion:\n  analysis:\n    motion_covariate: true\n    motion_interaction: true\n    motion_mediation: true\n</code></pre>"},{"location":"how-tos/physio-hooks/","title":"Physiological Data Integration","text":"<p>This guide explains how to integrate physiological data (cardiac and respiratory) with SpinePrep for advanced confound regression.</p>"},{"location":"how-tos/physio-hooks/#overview","title":"Overview","text":"<p>Physiological data can be used to:</p> <ul> <li>Extract cardiac and respiratory regressors</li> <li>Perform physiological noise correction</li> <li>Improve signal quality in spinal cord data</li> </ul>"},{"location":"how-tos/physio-hooks/#supported-formats","title":"Supported Formats","text":"<p>SpinePrep supports physiological data in the following formats:</p> <ul> <li>BIDS physiological files: <code>*_physio.tsv.gz</code> and <code>*_physio.json</code></li> <li>Text files: Tab-separated or comma-separated values</li> <li>JSON metadata: Physiological recording parameters</li> </ul>"},{"location":"how-tos/physio-hooks/#configuration","title":"Configuration","text":""},{"location":"how-tos/physio-hooks/#basic-setup","title":"Basic Setup","text":"<pre><code># config.yaml\nphysio:\n  enabled: true\n  cardiac_channel: 0  # Channel index for cardiac signal\n  respiratory_channel: 1  # Channel index for respiratory signal\n  sampling_rate: 500  # Hz\n  method: \"retroicor\"  # or \"rvhr\", \"rvt\"\n</code></pre>"},{"location":"how-tos/physio-hooks/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># config.yaml\nphysio:\n  enabled: true\n  cardiac_channel: 0\n  respiratory_channel: 1\n  sampling_rate: 500\n  method: \"retroicor\"\n  parameters:\n    cardiac:\n      order: 3\n      threshold: 0.3\n    respiratory:\n      order: 4\n      threshold: 0.1\n  output:\n    regressors: true\n    plots: true\n    quality_metrics: true\n</code></pre>"},{"location":"how-tos/physio-hooks/#data-preparation","title":"Data Preparation","text":""},{"location":"how-tos/physio-hooks/#bids-format","title":"BIDS Format","text":"<p>Place physiological data in the BIDS structure:</p> <pre><code>bids/\n\u2514\u2500\u2500 sub-01/\n    \u2514\u2500\u2500 ses-01/\n        \u2514\u2500\u2500 func/\n            \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_bold.nii.gz\n            \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_bold.json\n            \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_physio.tsv.gz\n            \u2514\u2500\u2500 sub-01_ses-01_task-rest_run-01_physio.json\n</code></pre>"},{"location":"how-tos/physio-hooks/#physiological-data-file","title":"Physiological Data File","text":"<p>File: <code>*_physio.tsv.gz</code></p> <pre><code>cardiac respiratory\n0.123   0.456\n0.124   0.457\n0.125   0.458\n</code></pre>"},{"location":"how-tos/physio-hooks/#metadata-file","title":"Metadata File","text":"<p>File: <code>*_physio.json</code></p> <pre><code>{\n  \"SamplingFrequency\": 500,\n  \"StartTime\": 0.0,\n  \"Columns\": [\"cardiac\", \"respiratory\"],\n  \"Cardiac\": {\n    \"Description\": \"Cardiac pulse signal\",\n    \"Units\": \"V\"\n  },\n  \"Respiratory\": {\n    \"Description\": \"Respiratory signal\",\n    \"Units\": \"V\"\n  }\n}\n</code></pre>"},{"location":"how-tos/physio-hooks/#processing-methods","title":"Processing Methods","text":""},{"location":"how-tos/physio-hooks/#retroicor","title":"Retroicor","text":"<p>Retrospective Image Correction (Retroicor) models physiological noise:</p> <pre><code># Retroicor regressors\nretroicor_regressors = retroicor(\n    cardiac_signal=cardiac,\n    respiratory_signal=respiratory,\n    cardiac_order=3,\n    respiratory_order=4,\n    sampling_rate=500,\n    tr=2.0\n)\n</code></pre>"},{"location":"how-tos/physio-hooks/#rvt-respiratory-volume-per-time","title":"RVT (Respiratory Volume per Time)","text":"<p>Respiratory Volume per Time models respiratory variations:</p> <pre><code># RVT regressors\nrvt_regressors = rvt(\n    respiratory_signal=respiratory,\n    sampling_rate=500,\n    tr=2.0\n)\n</code></pre>"},{"location":"how-tos/physio-hooks/#rvhr-respiratory-volume-heart-rate","title":"RVHR (Respiratory Volume Heart Rate)","text":"<p>Respiratory Volume Heart Rate models cardiorespiratory interactions:</p> <pre><code># RVHR regressors\nrvhr_regressors = rvhr(\n    cardiac_signal=cardiac,\n    respiratory_signal=respiratory,\n    sampling_rate=500,\n    tr=2.0\n)\n</code></pre>"},{"location":"how-tos/physio-hooks/#output-files","title":"Output Files","text":""},{"location":"how-tos/physio-hooks/#physiological-regressors","title":"Physiological Regressors","text":"<p>File: <code>*_desc-physio_timeseries.tsv</code></p> <pre><code>cardiac_sin_01  cardiac_cos_01  cardiac_sin_02  cardiac_cos_02  cardiac_sin_03  cardiac_cos_03  resp_sin_01 resp_cos_01 resp_sin_02 resp_cos_02 resp_sin_03 resp_cos_03 resp_sin_04 resp_cos_04 rvt rvhr\n0.123   0.456   0.789   0.012   0.345   0.678   0.901   0.234   0.567   0.890   0.123   0.456   0.789   0.012   0.345   0.678\n</code></pre>"},{"location":"how-tos/physio-hooks/#quality-metrics","title":"Quality Metrics","text":"<p>File: <code>*_desc-physio_quality.json</code></p> <pre><code>{\n  \"cardiac\": {\n    \"mean_hr\": 72.5,\n    \"hr_std\": 5.2,\n    \"signal_quality\": 0.85\n  },\n  \"respiratory\": {\n    \"mean_rr\": 16.2,\n    \"rr_std\": 2.1,\n    \"signal_quality\": 0.78\n  },\n  \"regressors\": {\n    \"cardiac_variance\": 0.123,\n    \"respiratory_variance\": 0.456,\n    \"total_variance\": 0.789\n  }\n}\n</code></pre>"},{"location":"how-tos/physio-hooks/#quality-control","title":"Quality Control","text":""},{"location":"how-tos/physio-hooks/#signal-quality-assessment","title":"Signal Quality Assessment","text":"<p>SpinePrep assesses physiological signal quality:</p> <ul> <li>Cardiac signal: Heart rate variability, signal-to-noise ratio</li> <li>Respiratory signal: Respiratory rate variability, signal quality</li> <li>Synchronization: Timing alignment with BOLD data</li> </ul>"},{"location":"how-tos/physio-hooks/#quality-plots","title":"Quality Plots","text":"<p>SpinePrep generates quality plots:</p> <ul> <li>Time series: Raw physiological signals</li> <li>Power spectra: Frequency domain analysis</li> <li>Regressor plots: Extracted regressors over time</li> <li>Quality metrics: Signal quality assessment</li> </ul>"},{"location":"how-tos/physio-hooks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-tos/physio-hooks/#common-issues","title":"Common Issues","text":"<p>Issue: No physiological data found Solutions: - Check file naming convention - Verify BIDS structure - Check file permissions</p> <p>Issue: Poor signal quality Solutions: - Check sensor placement - Verify sampling rate - Check for artifacts</p> <p>Issue: Synchronization problems Solutions: - Check timing parameters - Verify start times - Check sampling rates</p>"},{"location":"how-tos/physio-hooks/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed physiological processing:</p> <pre><code>spineprep --debug config.yaml\n</code></pre> <p>This will show: - Physiological data loading - Signal processing steps - Regressor extraction - Quality metric calculations</p>"},{"location":"how-tos/physio-hooks/#best-practices","title":"Best Practices","text":""},{"location":"how-tos/physio-hooks/#data-collection","title":"Data Collection","text":"<ol> <li>Sensor placement: Ensure good contact and minimal movement</li> <li>Sampling rate: Use high sampling rate (\u2265500 Hz)</li> <li>Synchronization: Record start times accurately</li> <li>Quality monitoring: Monitor signal quality during acquisition</li> </ol>"},{"location":"how-tos/physio-hooks/#processing","title":"Processing","text":"<ol> <li>Signal preprocessing: Filter and detrend signals</li> <li>Artifact detection: Identify and handle artifacts</li> <li>Quality assessment: Evaluate signal quality</li> <li>Regressor validation: Check extracted regressors</li> </ol>"},{"location":"how-tos/physio-hooks/#analysis","title":"Analysis","text":"<ol> <li>Regressor inclusion: Include physiological regressors in analysis</li> <li>Quality control: Exclude poor quality data</li> <li>Validation: Verify physiological correction effectiveness</li> </ol>"},{"location":"how-tos/physio-hooks/#example-workflow","title":"Example Workflow","text":""},{"location":"how-tos/physio-hooks/#complete-example","title":"Complete Example","text":"<pre><code># config_physio.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\n\n# Physiological processing\nphysio:\n  enabled: true\n  cardiac_channel: 0\n  respiratory_channel: 1\n  sampling_rate: 500\n  method: \"retroicor\"\n  parameters:\n    cardiac:\n      order: 3\n      threshold: 0.3\n    respiratory:\n      order: 4\n      threshold: 0.1\n  output:\n    regressors: true\n    plots: true\n    quality_metrics: true\n\n# Confound regression\nconfounds:\n  motion: true\n  acompcor: true\n  physio: true  # Include physiological regressors\n</code></pre>"},{"location":"how-tos/physio-hooks/#running-with-physiological-data","title":"Running with Physiological Data","text":"<pre><code># Run with physiological processing\nspineprep config_physio.yaml\n\n# Check physiological outputs\nls derivatives/spineprep/sub-01/ses-01/func/*physio*\n</code></pre>"},{"location":"how-tos/physio-hooks/#using-physiological-regressors","title":"Using Physiological Regressors","text":"<pre><code>import pandas as pd\n\n# Load confounds including physiological regressors\nconfounds = pd.read_csv('desc-confounds_timeseries.tsv', sep='\\t')\n\n# Select physiological regressors\nphysio_regressors = confounds.filter(regex='cardiac_|resp_|rvt|rvhr')\n\n# Use in analysis\nfrom nilearn.glm import first_level_models\nmodel = first_level_models.FirstLevelModel()\nmodel.fit(confounds[['trans_x', 'trans_y', 'trans_z'] + physio_regressors.columns.tolist()])\n</code></pre>"},{"location":"reference/api/","title":"API Reference","text":"<p>This page documents the SpinePrep API, including all functions and classes available in the <code>workflow/lib</code> modules.</p>"},{"location":"reference/api/#confounds","title":"confounds","text":"<p>Confounds computation utilities for SpinePrep.</p>"},{"location":"reference/api/#functions","title":"Functions","text":""},{"location":"reference/api/#acompcor_pcsts-n_components-highpass_hz-tr_s-detrend-standardize","title":"<code>acompcor_pcs(ts, n_components, highpass_hz, tr_s, detrend, standardize)</code>","text":"<p>Extract principal components from time series data.</p>"},{"location":"reference/api/#append_acompcordf-pcs_dict","title":"<code>append_acompcor(df, pcs_dict)</code>","text":"<p>Append aCompCor principal components to confounds DataFrame.</p>"},{"location":"reference/api/#append_censor_columnsdf-censor_dict","title":"<code>append_censor_columns(df, censor_dict)</code>","text":"<p>Append censor columns to confounds DataFrame.</p>"},{"location":"reference/api/#assemble_confoundsfd-dvars-extra","title":"<code>assemble_confounds(fd, dvars, extra)</code>","text":"<p>Assemble confounds DataFrame from FD and DVARS.</p>"},{"location":"reference/api/#build_censorfd-dvars-cfg-dict","title":"<code>build_censor(fd, dvars, cfg) -&gt; Dict</code>","text":"<p>Build censor vector based on FD and DVARS thresholds with contiguity rules.</p>"},{"location":"reference/api/#compute_dvarsbold_path-mask_path","title":"<code>compute_dvars(bold_path, mask_path)</code>","text":"<p>Compute DVARS from BOLD data.</p>"},{"location":"reference/api/#compute_fd_from_paramsparams-tr_s","title":"<code>compute_fd_from_params(params, tr_s)</code>","text":"<p>Compute Framewise Displacement (Power) from motion parameters.</p>"},{"location":"reference/api/#extract_mask_timeseriesbold-mask-standardize","title":"<code>extract_mask_timeseries(bold, mask, standardize)</code>","text":"<p>Extract time series from BOLD data using a mask.</p>"},{"location":"reference/api/#load_bold_and_apply_cropbold_path-crop_json","title":"<code>load_bold_and_apply_crop(bold_path, crop_json)</code>","text":"<p>Load BOLD data and apply temporal cropping if specified.</p>"},{"location":"reference/api/#read_motion_paramstsv_path","title":"<code>read_motion_params(tsv_path)</code>","text":"<p>Read motion parameters from TSV file.</p>"},{"location":"reference/api/#write_confounds_tsv_jsondf-out_tsv-out_json-meta","title":"<code>write_confounds_tsv_json(df, out_tsv, out_json, meta)</code>","text":"<p>Write confounds TSV and JSON files.</p>"},{"location":"reference/api/#crop","title":"crop","text":"<p>Temporal crop detection and IO utilities.</p>"},{"location":"reference/api/#functions_1","title":"Functions","text":""},{"location":"reference/api/#crop_sidecar_pathbold_path-deriv_root-str","title":"<code>crop_sidecar_path(bold_path, deriv_root) -&gt; str</code>","text":"<p>Generate crop sidecar path from BOLD path and derivatives root.</p>"},{"location":"reference/api/#detect_cropconfounds_tsv-bold_path-cord_mask-opts","title":"<code>detect_crop(confounds_tsv, bold_path, cord_mask, opts)</code>","text":"<p>Detect temporal crop indices using robust z-statistics on cord ROI mean signal.</p>"},{"location":"reference/api/#read_crop_jsonpath","title":"<code>read_crop_json(path)</code>","text":"<p>Read crop information from JSON file.</p>"},{"location":"reference/api/#write_crop_jsonout_path-info","title":"<code>write_crop_json(out_path, info)</code>","text":"<p>Write crop information to JSON file.</p>"},{"location":"reference/api/#deriv","title":"deriv","text":""},{"location":"reference/api/#functions_2","title":"Functions","text":""},{"location":"reference/api/#derive_pathsrow-deriv_root","title":"<code>derive_paths(row, deriv_root)</code>","text":"<p>Given a manifest row with 'bold_path', compute absolute derivative paths</p>"},{"location":"reference/api/#stage_filesrc-dst","title":"<code>stage_file(src, dst)</code>","text":"<p>Stage file into derivatives: prefer hardlink, else copy. Create parent dirs.</p>"},{"location":"reference/api/#provenance","title":"provenance","text":""},{"location":"reference/api/#functions_3","title":"Functions","text":""},{"location":"reference/api/#write_provtarget-step-inputs-params-tools","title":"<code>write_prov(target, step, inputs, params, tools)</code>","text":"<p>No documentation available</p>"},{"location":"reference/api/#qc","title":"qc","text":"<p>Quality control and reporting utilities for SpinePrep.</p>"},{"location":"reference/api/#functions_4","title":"Functions","text":""},{"location":"reference/api/#collect_provenanceentries","title":"<code>collect_provenance(entries)</code>","text":"<p>Collect provenance file paths from manifest entries.</p>"},{"location":"reference/api/#collect_registration_filesmanifest_tsv-sub","title":"<code>collect_registration_files(manifest_tsv, sub)</code>","text":"<p>No documentation available</p>"},{"location":"reference/api/#compute_dvarsconf","title":"<code>compute_dvars(conf)</code>","text":"<p>Compute DVARS from confounds data.</p>"},{"location":"reference/api/#compute_fdconf","title":"<code>compute_fd(conf)</code>","text":"<p>Compute Framewise Displacement (Power) from motion parameters.</p>"},{"location":"reference/api/#compute_fd_from_motion_paramsmotion_params_tsv","title":"<code>compute_fd_from_motion_params(motion_params_tsv)</code>","text":"<p>Compute FD from motion parameters TSV file.</p>"},{"location":"reference/api/#generate_methods_boilerplatecfg-sub-n_runs-str","title":"<code>generate_methods_boilerplate(cfg, sub, n_runs) -&gt; str</code>","text":"<p>Generate methods boilerplate text.</p>"},{"location":"reference/api/#get_registration_statusmanifest_tsv-sub","title":"<code>get_registration_status(manifest_tsv, sub)</code>","text":"<p>No documentation available</p>"},{"location":"reference/api/#module_decisionscfg","title":"<code>module_decisions(cfg)</code>","text":"<p>Extract module decisions from config.</p>"},{"location":"reference/api/#plot_ev_seriesout_png-ev_data-title","title":"<code>plot_ev_series(out_png, ev_data, title)</code>","text":"<p>Plot explained variance for aCompCor components.</p>"},{"location":"reference/api/#plot_seriesout_png-series-title-ylabel-censor","title":"<code>plot_series(out_png, series, title, ylabel, censor)</code>","text":"<p>Create a time series plot with optional censor overlays and save as PNG.</p>"},{"location":"reference/api/#read_confounds_tsvtsv","title":"<code>read_confounds_tsv(tsv)</code>","text":"<p>Read confounds TSV and return as dict of column_name -&gt; list of values.</p>"},{"location":"reference/api/#read_motion_paramstsv","title":"<code>read_motion_params(tsv)</code>","text":"<p>Read motion parameters from motion correction TSV file.</p>"},{"location":"reference/api/#render_subject_reportsub-manifest_tsv-cfg-deriv_root-str","title":"<code>render_subject_report(sub, manifest_tsv, cfg, deriv_root) -&gt; str</code>","text":"<p>Generate HTML report for a subject.</p>"},{"location":"reference/api/#rows_for_subjectmanifest_tsv-sub","title":"<code>rows_for_subject(manifest_tsv, sub)</code>","text":"<p>Get all rows for a specific subject from manifest_deriv.tsv.</p>"},{"location":"reference/api/#subjects_from_manifestmanifest_tsv","title":"<code>subjects_from_manifest(manifest_tsv)</code>","text":"<p>Extract unique subject IDs from manifest_deriv.tsv.</p>"},{"location":"reference/api/#registration","title":"registration","text":"<p>Registration utilities for SpinePrep.</p>"},{"location":"reference/api/#functions_5","title":"Functions","text":""},{"location":"reference/api/#derive_inputsrow-bids_root","title":"<code>derive_inputs(row, bids_root)</code>","text":"<p>Derive input paths for registration from a manifest row.</p>"},{"location":"reference/api/#derive_outputsrow-deriv_root","title":"<code>derive_outputs(row, deriv_root)</code>","text":"<p>Derive output paths for registration from a manifest row.</p>"},{"location":"reference/api/#mask_pathsrow","title":"<code>mask_paths(row)</code>","text":"<p>Get mask paths for aCompCor from a manifest row.</p>"},{"location":"reference/api/#write_provpath-meta","title":"<code>write_prov(path, meta)</code>","text":"<p>Write provenance metadata to a .prov.json file.</p>"},{"location":"reference/api/#samples","title":"samples","text":""},{"location":"reference/api/#functions_6","title":"Functions","text":""},{"location":"reference/api/#assign_motion_groupsrows-mode-require_same","title":"<code>assign_motion_groups(rows, mode, require_same)</code>","text":"<p>Assign motion_group keys to rows based on grouping mode and requirements.</p>"},{"location":"reference/api/#build_samplesdiscover_json-bids_root-out_tsv-int","title":"<code>build_samples(discover_json, bids_root, out_tsv) -&gt; int</code>","text":"<p>Create a normalized per-run manifest for the workflow.</p>"},{"location":"reference/api/#first_rowsamples_tsv-dict","title":"<code>first_row(samples_tsv) -&gt; dict</code>","text":"<p>Return the first non-header row as a dict. Raises FileNotFoundError or ValueError.</p>"},{"location":"reference/api/#row_by_idsamples_tsv-idx-dict","title":"<code>row_by_id(samples_tsv, idx) -&gt; dict</code>","text":"<p>No documentation available</p>"},{"location":"reference/api/#rowssamples_tsv","title":"<code>rows(samples_tsv)</code>","text":"<p>No documentation available</p>"},{"location":"reference/api/#targets","title":"targets","text":"<p>Path utilities for SpinePrep targets.</p> <p>Pure string-only functions for composing derivative paths from BIDS entities. No global imports, no IO operations - unit testable.</p>"},{"location":"reference/api/#functions_7","title":"Functions","text":""},{"location":"reference/api/#bold_fnamesub-ses-task-run-str","title":"<code>bold_fname(sub, ses, task, run) -&gt; str</code>","text":"<p>Generate BOLD filename from BIDS entities.</p>"},{"location":"reference/api/#confounds_json_pathderiv_root-sub-ses-task-run-str","title":"<code>confounds_json_path(deriv_root, sub, ses, task, run) -&gt; str</code>","text":"<p>Generate confounds JSON path.</p>"},{"location":"reference/api/#confounds_tsv_pathderiv_root-sub-ses-task-run-str","title":"<code>confounds_tsv_path(deriv_root, sub, ses, task, run) -&gt; str</code>","text":"<p>Generate confounds TSV path.</p>"},{"location":"reference/api/#crop_json_pathderiv_root-sub-ses-task-run-str","title":"<code>crop_json_path(deriv_root, sub, ses, task, run) -&gt; str</code>","text":"<p>Generate crop JSON path.</p>"},{"location":"reference/api/#deriv_pathderiv_root-sub-ses-modality-fname-str","title":"<code>deriv_path(deriv_root, sub, ses, modality, fname) -&gt; str</code>","text":"<p>Generate derivative path from BIDS entities.</p>"},{"location":"reference/api/#motion_bold_pathderiv_root-sub-ses-task-run-str","title":"<code>motion_bold_path(deriv_root, sub, ses, task, run) -&gt; str</code>","text":"<p>Generate motion-corrected BOLD path.</p>"},{"location":"reference/api/#mppca_bold_pathderiv_root-sub-ses-task-run-str","title":"<code>mppca_bold_path(deriv_root, sub, ses, task, run) -&gt; str</code>","text":"<p>Generate MP-PCA denoised BOLD path.</p>"},{"location":"reference/api/#summary","title":"Summary","text":"<p>The SpinePrep API provides the following modules:</p> <ul> <li>confounds: 11 functions, 0 classes</li> <li>crop: 4 functions, 0 classes</li> <li>deriv: 2 functions, 0 classes</li> <li>provenance: 1 functions, 0 classes</li> <li>qc: 15 functions, 0 classes</li> <li>registration: 4 functions, 0 classes</li> <li>samples: 5 functions, 0 classes</li> <li>targets: 7 functions, 0 classes</li> </ul>"},{"location":"reference/config/","title":"Configuration Reference","text":"<p>This page documents all configuration options available in SpinePrep.</p> <p>Schema: SpinePrep configuration</p>"},{"location":"reference/config/#configuration-options","title":"Configuration Options","text":"Parameter Type Default Description ### acq <p>No description available</p> Parameter Type Default Description <code>acq.echo_spacing_s</code> ['number', 'null'] None No description available <code>acq.pe_dir</code> string None No description available <code>acq.slice_timing</code> string None No description available <code>acq.tr</code> number None No description available"},{"location":"reference/config/#dataset","title":"dataset","text":"<p>No description available</p> Parameter Type Default Description <code>dataset.runs_per_subject</code> any None No description available <code>dataset.sessions</code> any None No description available"},{"location":"reference/config/#options","title":"options","text":"<p>No description available</p> Parameter Type Default Description ### options.acompcor <p>No description available</p> Parameter Type Default Description <code>options.acompcor.detrend</code> boolean None No description available <code>options.acompcor.enable</code> boolean None No description available <code>options.acompcor.explained_variance_min</code> number None No description available <code>options.acompcor.highpass_hz</code> number None No description available <code>options.acompcor.n_components_per_tissue</code> integer None No description available <code>options.acompcor.standardize</code> boolean None No description available <code>options.acompcor.tissues</code> array of string None No description available"},{"location":"reference/config/#optionscensor","title":"options.censor","text":"<p>No description available</p> Parameter Type Default Description <code>options.censor.dvars_thresh</code> number None No description available <code>options.censor.enable</code> boolean None No description available <code>options.censor.fd_thresh_mm</code> number None No description available <code>options.censor.min_contig_vols</code> integer None No description available <code>options.censor.pad_vols</code> integer None No description available"},{"location":"reference/config/#optionscleanup","title":"options.cleanup","text":"<p>No description available</p> Parameter Type Default Description <code>options.cleanup.keep_only_latest_stage</code> boolean None No description available"},{"location":"reference/config/#optionsconfounds","title":"options.confounds","text":"<p>No description available</p> Parameter Type Default Description <code>options.confounds.dvars_method</code> string None No description available <code>options.confounds.fd_method</code> string None No description available <p>| <code>options.denoise_mppca</code> | boolean | None | No description available |</p>"},{"location":"reference/config/#optionsfirst_level","title":"options.first_level","text":"<p>No description available</p> Parameter Type Default Description <code>options.first_level.engine</code> string None No description available <code>options.first_level.feat_variant</code> string None No description available"},{"location":"reference/config/#optionsingest","title":"options.ingest","text":"<p>No description available</p> Parameter Type Default Description <code>options.ingest.enable</code> boolean None No description available"},{"location":"reference/config/#optionsmasks","title":"options.masks","text":"<p>No description available</p> Parameter Type Default Description <code>options.masks.binarize_thr</code> number None No description available <code>options.masks.enable</code> boolean None No description available <code>options.masks.source</code> string None No description available"},{"location":"reference/config/#optionsmotion","title":"options.motion","text":"<p>No description available</p> Parameter Type Default Description ### options.motion.concat <p>No description available</p> Parameter Type Default Description <code>options.motion.concat.mode</code> string None No description available <code>options.motion.concat.require_same</code> array of string None No description available <p>| <code>options.motion.engine</code> | string | None | No description available | | <code>options.motion.slice_axis</code> | string | None | No description available |</p>"},{"location":"reference/config/#optionssdc","title":"options.sdc","text":"<p>No description available</p> Parameter Type Default Description <code>options.sdc.enable</code> boolean None No description available <code>options.sdc.mode</code> string None No description available"},{"location":"reference/config/#optionssmoothing","title":"options.smoothing","text":"<p>No description available</p> Parameter Type Default Description <code>options.smoothing.enable</code> boolean None No description available <code>options.smoothing.fwhm_mm</code> number None No description available"},{"location":"reference/config/#optionstemporal_crop","title":"options.temporal_crop","text":"<p>No description available</p> Parameter Type Default Description <code>options.temporal_crop.enable</code> boolean None No description available <code>options.temporal_crop.max_trim_end</code> integer None No description available <code>options.temporal_crop.max_trim_start</code> integer None No description available <code>options.temporal_crop.method</code> string None No description available <code>options.temporal_crop.z_thresh</code> number None No description available"},{"location":"reference/config/#paths","title":"paths","text":"<p>No description available</p> Parameter Type Default Description <code>paths.bids_dir</code> string None No description available <code>paths.deriv_dir</code> string None No description available <code>paths.logs_dir</code> string None No description available <code>paths.root</code> string None No description available <code>paths.work_dir</code> string None No description available <p>| <code>pipeline_version</code> | string | None | No description available | | <code>project_name</code> | string | None | No description available |</p>"},{"location":"reference/config/#qc","title":"qc","text":"<p>No description available</p> Parameter Type Default Description <code>qc.cohort_report</code> boolean None No description available <code>qc.subject_report</code> boolean None No description available"},{"location":"reference/config/#registration","title":"registration","text":"<p>No description available</p> Parameter Type Default Description <code>registration.enable</code> boolean None No description available <code>registration.guidance</code> string None No description available <code>registration.levels</code> string None No description available ### registration.rootlets <p>No description available</p> Parameter Type Default Description <code>registration.rootlets.enable</code> boolean None No description available <code>registration.rootlets.mode</code> string None No description available <p>| <code>registration.template</code> | string | None | No description available | | <code>registration.use_gm_wm_masks</code> | boolean | None | No description available |</p>"},{"location":"reference/config/#resources","title":"resources","text":"<p>No description available</p> Parameter Type Default Description <code>resources.default_mem_gb</code> integer None No description available <code>resources.default_threads</code> integer None No description available"},{"location":"reference/config/#runtime","title":"runtime","text":"<p>No description available</p> Parameter Type Default Description <code>runtime.container_engine</code> ['string', 'null'] None No description available"},{"location":"reference/config/#study","title":"study","text":"<p>No description available</p> Parameter Type Default Description <code>study.name</code> string None No description available"},{"location":"reference/config/#templates","title":"templates","text":"<p>No description available</p> Parameter Type Default Description <code>templates.pam50_version</code> string None No description available"},{"location":"reference/config/#tools","title":"tools","text":"<p>No description available</p> Parameter Type Default Description <code>tools.ants</code> string None No description available <code>tools.dcm2niix</code> string None No description available <code>tools.fsl</code> string None No description available <code>tools.sct</code> string None No description available <code>tools.sct_min_version</code> string None No description available"},{"location":"reference/config/#example-configuration","title":"Example Configuration","text":"<pre><code># Basic configuration\nbids_dir: /path/to/bids\noutput_dir: /path/to/output\nn_procs: 4\n\n# Advanced configuration\nmotion:\n  fd_threshold: 0.5\n  dvars_threshold: 75\n\nconfounds:\n  acompcor: true\n  censor: true\n\nregistration:\n  method: sct\n  template: PAM50\n</code></pre>"},{"location":"user-guide/outputs/","title":"Outputs","text":"<p>SpinePrep produces BIDS-compliant derivatives following the BIDS-Derivatives specification. This page describes the output structure and file naming conventions.</p>"},{"location":"user-guide/outputs/#output-structure","title":"Output Structure","text":"<pre><code>derivatives/\n\u2514\u2500\u2500 spineprep/\n    \u251c\u2500\u2500 dataset_description.json\n    \u251c\u2500\u2500 participants.tsv\n    \u251c\u2500\u2500 logs/\n    \u2502   \u251c\u2500\u2500 manifest_deriv.tsv\n    \u2502   \u2514\u2500\u2500 samples.tsv\n    \u2514\u2500\u2500 sub-01/\n        \u251c\u2500\u2500 ses-01/\n        \u2502   \u251c\u2500\u2500 func/\n        \u2502   \u2502   \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_bold.nii.gz\n        \u2502   \u2502   \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_bold.json\n        \u2502   \u2502   \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_desc-confounds_timeseries.tsv\n        \u2502   \u2502   \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_desc-confounds_timeseries.json\n        \u2502   \u2502   \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_desc-censor_mask.nii.gz\n        \u2502   \u2502   \u2514\u2500\u2500 sub-01_ses-01_task-rest_run-01_desc-censor_mask.json\n        \u2502   \u2514\u2500\u2500 anat/\n        \u2502       \u251c\u2500\u2500 sub-01_ses-01_T2w.nii.gz\n        \u2502       \u251c\u2500\u2500 sub-01_ses-01_T2w.json\n        \u2502       \u251c\u2500\u2500 sub-01_ses-01_desc-cord_mask.nii.gz\n        \u2502       \u2514\u2500\u2500 sub-01_ses-01_desc-cord_mask.json\n        \u2514\u2500\u2500 reports/\n            \u251c\u2500\u2500 sub-01_ses-01_task-rest_run-01_desc-qc_report.html\n            \u2514\u2500\u2500 sub-01_ses-01_task-rest_run-01_desc-qc_report.json\n</code></pre>"},{"location":"user-guide/outputs/#file-naming-convention","title":"File Naming Convention","text":"<p>SpinePrep follows BIDS naming conventions with the following pattern:</p> <pre><code>{entity}_{label}_{suffix}_{desc}_{ext}\n</code></pre>"},{"location":"user-guide/outputs/#entities","title":"Entities","text":"<ul> <li><code>sub-{participant_id}</code>: Subject identifier</li> <li><code>ses-{session_id}</code>: Session identifier (optional)</li> <li><code>task-{task_id}</code>: Task identifier</li> <li><code>run-{run_id}</code>: Run identifier (optional)</li> <li><code>space-{space_id}</code>: Space identifier (e.g., <code>orig</code>, <code>PAM50</code>)</li> </ul>"},{"location":"user-guide/outputs/#suffixes","title":"Suffixes","text":"<ul> <li><code>bold</code>: Preprocessed BOLD data</li> <li><code>T2w</code>: T2-weighted anatomical data</li> <li><code>mask</code>: Binary mask files</li> <li><code>timeseries</code>: Time series data (confounds)</li> </ul>"},{"location":"user-guide/outputs/#descriptors","title":"Descriptors","text":"<ul> <li><code>preproc</code>: Preprocessed data</li> <li><code>confounds</code>: Confound regressors</li> <li><code>censor</code>: Censor mask</li> <li><code>cord</code>: Spinal cord mask</li> <li><code>qc</code>: Quality control data</li> </ul>"},{"location":"user-guide/outputs/#preprocessed-data","title":"Preprocessed Data","text":""},{"location":"user-guide/outputs/#bold-data","title":"BOLD Data","text":"<p>File: <code>sub-{id}_ses-{id}_task-{id}_run-{id}_bold.nii.gz</code></p> <p>Preprocessed BOLD data with the following processing steps applied:</p> <ul> <li>Motion correction</li> <li>Slice timing correction (if specified)</li> <li>Spatial smoothing (if specified)</li> <li>Intensity normalization</li> </ul> <p>Sidecar: <code>sub-{id}_ses-{id}_task-{id}_run-{id}_bold.json</code></p> <pre><code>{\n  \"RepetitionTime\": 2.0,\n  \"SliceTiming\": [0.0, 0.5, 1.0, 1.5],\n  \"ProcessingSoftware\": \"SpinePrep\",\n  \"ProcessingSoftwareVersion\": \"0.1.0\",\n  \"ProcessingSteps\": [\n    \"Motion correction\",\n    \"Slice timing correction\",\n    \"Spatial smoothing\"\n  ]\n}\n</code></pre>"},{"location":"user-guide/outputs/#anatomical-data","title":"Anatomical Data","text":"<p>File: <code>sub-{id}_ses-{id}_T2w.nii.gz</code></p> <p>Preprocessed T2-weighted anatomical data with:</p> <ul> <li>Bias field correction</li> <li>Intensity normalization</li> <li>Registration to standard space (if specified)</li> </ul>"},{"location":"user-guide/outputs/#confound-regressors","title":"Confound Regressors","text":""},{"location":"user-guide/outputs/#motion-parameters","title":"Motion Parameters","text":"<p>File: <code>sub-{id}_ses-{id}_task-{id}_run-{id}_desc-confounds_timeseries.tsv</code></p> <p>Tab-separated file containing motion parameters and other confounds:</p> <pre><code>framewise_displacement  trans_x trans_y trans_z rot_x   rot_y   rot_z   global_signal   white_matter    csf acompcor_00 acompcor_01 acompcor_02 acompcor_03 acompcor_04 acompcor_05\n0.1234  0.001   0.002   0.003   0.0001  0.0002  0.0003  1234.5  234.5   345.6   0.123   0.456   0.789   0.012   0.345   0.678\n</code></pre> <p>Columns: - <code>framewise_displacement</code>: Framewise displacement (FD) - <code>trans_x/y/z</code>: Translation parameters - <code>rot_x/y/z</code>: Rotation parameters - <code>global_signal</code>: Global signal - <code>white_matter</code>: White matter signal - <code>csf</code>: CSF signal - <code>acompcor_00</code> to <code>acompcor_05</code>: aCompCor components</p>"},{"location":"user-guide/outputs/#censor-mask","title":"Censor Mask","text":"<p>File: <code>sub-{id}_ses-{id}_task-{id}_run-{id}_desc-censor_mask.nii.gz</code></p> <p>Binary mask indicating which time points to censor based on motion thresholds.</p>"},{"location":"user-guide/outputs/#masks","title":"Masks","text":""},{"location":"user-guide/outputs/#spinal-cord-mask","title":"Spinal Cord Mask","text":"<p>File: <code>sub-{id}_ses-{id}_desc-cord_mask.nii.gz</code></p> <p>Binary mask of the spinal cord region.</p>"},{"location":"user-guide/outputs/#vertebral-level-masks","title":"Vertebral Level Masks","text":"<p>File: <code>sub-{id}_ses-{id}_desc-level-{level}_mask.nii.gz</code></p> <p>Binary masks for specific vertebral levels (C1, C2, etc.).</p>"},{"location":"user-guide/outputs/#quality-control","title":"Quality Control","text":""},{"location":"user-guide/outputs/#qc-report","title":"QC Report","text":"<p>File: <code>sub-{id}_ses-{id}_task-{id}_run-{id}_desc-qc_report.html</code></p> <p>Interactive HTML report containing:</p> <ul> <li>Motion plots (FD, DVARS)</li> <li>aCompCor component plots</li> <li>Censor mask visualization</li> <li>Processing summary</li> </ul>"},{"location":"user-guide/outputs/#qc-metrics","title":"QC Metrics","text":"<p>File: <code>sub-{id}_ses-{id}_task-{id}_run-{id}_desc-qc_report.json</code></p> <p>JSON file containing quantitative QC metrics:</p> <pre><code>{\n  \"motion\": {\n    \"mean_fd\": 0.1234,\n    \"max_fd\": 0.5678,\n    \"outlier_frames\": 5,\n    \"outlier_percentage\": 2.5\n  },\n  \"signal\": {\n    \"mean_dvars\": 45.6,\n    \"max_dvars\": 123.4,\n    \"snr\": 12.3\n  },\n  \"processing\": {\n    \"total_time\": 1234.5,\n    \"steps_completed\": [\"motion\", \"confounds\", \"registration\"],\n    \"warnings\": [],\n    \"errors\": []\n  }\n}\n</code></pre>"},{"location":"user-guide/outputs/#logs-and-manifests","title":"Logs and Manifests","text":""},{"location":"user-guide/outputs/#samples-file","title":"Samples File","text":"<p>File: <code>logs/samples.tsv</code></p> <pre><code>participant_id  session_id  task_id run_id  space   desc    path\nsub-01  ses-01  task-rest   run-01  orig    preproc sub-01/ses-01/func/sub-01_ses-01_task-rest_run-01_bold.nii.gz\n</code></pre>"},{"location":"user-guide/outputs/#manifest-file","title":"Manifest File","text":"<p>File: <code>logs/manifest_deriv.tsv</code></p> <pre><code>path    desc    space   res den tr  ts  acq rec dir run modality    chunk   part    ext\nsub-01/ses-01/func/sub-01_ses-01_task-rest_run-01_bold.nii.gz   preproc orig    2.0 0.0 2.0 0.0 0.0 0.0 0.0 1.0 func    0.0 0.0 .nii.gz\n</code></pre>"},{"location":"user-guide/outputs/#dataset-description","title":"Dataset Description","text":"<p>File: <code>dataset_description.json</code></p> <pre><code>{\n  \"Name\": \"SpinePrep derivatives\",\n  \"BIDSVersion\": \"1.6.0\",\n  \"DatasetType\": \"derivatives\",\n  \"GeneratedBy\": [\n    {\n      \"Name\": \"SpinePrep\",\n      \"Version\": \"0.1.0\",\n      \"Description\": \"Spinal cord preprocessing pipeline\",\n      \"CodeURL\": \"https://github.com/spineprep/spineprep\",\n      \"Container\": {\n        \"Type\": \"docker\",\n        \"Tag\": \"spineprep/spineprep:0.1.0\"\n      }\n    }\n  ],\n  \"PipelineDescription\": {\n    \"Name\": \"SpinePrep\",\n    \"Version\": \"0.1.0\",\n    \"CodeURL\": \"https://github.com/spineprep/spineprep\"\n  }\n}\n</code></pre>"},{"location":"user-guide/qc/","title":"Quality Control","text":"<p>SpinePrep provides comprehensive quality control (QC) metrics to assess data quality and preprocessing effectiveness. This guide explains the QC metrics, how to interpret them, and how to use the QC reports.</p>"},{"location":"user-guide/qc/#qc-metrics-overview","title":"QC Metrics Overview","text":"<p>SpinePrep generates several types of QC metrics:</p> <ul> <li>Motion metrics: Framewise displacement (FD) and DVARS</li> <li>Signal quality: Signal-to-noise ratio (SNR), global signal</li> <li>Confound metrics: aCompCor components, censor masks</li> <li>Processing metrics: Success/failure rates, processing times</li> </ul>"},{"location":"user-guide/qc/#motion-metrics","title":"Motion Metrics","text":""},{"location":"user-guide/qc/#framewise-displacement-fd","title":"Framewise Displacement (FD)","text":"<p>Framewise displacement measures the total movement between consecutive volumes:</p> <pre><code>FD = |\u0394x| + |\u0394y| + |\u0394z| + |\u0394\u03b1| + |\u0394\u03b2| + |\u0394\u03b3|\n</code></pre> <p>Where: - <code>\u0394x, \u0394y, \u0394z</code>: Translation changes (mm) - <code>\u0394\u03b1, \u0394\u03b2, \u0394\u03b3</code>: Rotation changes (radians)</p> <p>Interpretation: - <code>FD &lt; 0.2 mm</code>: Excellent motion - <code>FD 0.2-0.5 mm</code>: Good motion - <code>FD 0.5-1.0 mm</code>: Moderate motion - <code>FD &gt; 1.0 mm</code>: Poor motion</p>"},{"location":"user-guide/qc/#dvars","title":"DVARS","text":"<p>DVARS measures the temporal derivative of the variance across voxels:</p> <pre><code>DVARS = \u221a(\u03a3(voxel_variance_change)\u00b2)\n</code></pre> <p>Interpretation: - <code>DVARS &lt; 50</code>: Excellent signal stability - <code>DVARS 50-75</code>: Good signal stability - <code>DVARS 75-100</code>: Moderate signal stability - <code>DVARS &gt; 100</code>: Poor signal stability</p>"},{"location":"user-guide/qc/#signal-quality-metrics","title":"Signal Quality Metrics","text":""},{"location":"user-guide/qc/#signal-to-noise-ratio-snr","title":"Signal-to-Noise Ratio (SNR)","text":"<p>SNR is calculated as the ratio of signal mean to noise standard deviation:</p> <pre><code>SNR = mean(signal) / std(noise)\n</code></pre> <p>Interpretation: - <code>SNR &gt; 20</code>: Excellent signal quality - <code>SNR 10-20</code>: Good signal quality - <code>SNR 5-10</code>: Moderate signal quality - <code>SNR &lt; 5</code>: Poor signal quality</p>"},{"location":"user-guide/qc/#global-signal","title":"Global Signal","text":"<p>Global signal is the mean signal across all voxels in the brain mask.</p> <p>Interpretation: - Stable global signal indicates good data quality - Sudden changes may indicate motion or artifacts</p>"},{"location":"user-guide/qc/#confound-metrics","title":"Confound Metrics","text":""},{"location":"user-guide/qc/#acompcor-components","title":"aCompCor Components","text":"<p>Anatomical CompCor (aCompCor) identifies noise components from white matter and CSF regions:</p> <ul> <li>aCompCor_00 to aCompCor_05: First 6 principal components</li> <li>Variance explained: Percentage of variance explained by each component</li> </ul> <p>Interpretation: - High variance in first components indicates significant noise - Components should be included as regressors in analysis</p>"},{"location":"user-guide/qc/#censor-masks","title":"Censor Masks","text":"<p>Censor masks identify time points with excessive motion:</p> <pre><code># Censor criteria\ncensor_fd = fd &gt; fd_threshold  # Default: 0.5 mm\ncensor_dvars = dvars &gt; dvars_threshold  # Default: 75\ncensor_mask = censor_fd | censor_dvars\n</code></pre> <p>Interpretation: - <code>censor_percentage &lt; 5%</code>: Excellent motion - <code>censor_percentage 5-10%</code>: Good motion - <code>censor_percentage 10-20%</code>: Moderate motion - <code>censor_percentage &gt; 20%</code>: Poor motion</p>"},{"location":"user-guide/qc/#qc-reports","title":"QC Reports","text":""},{"location":"user-guide/qc/#html-report","title":"HTML Report","text":"<p>SpinePrep generates interactive HTML reports with:</p> <ul> <li>Motion plots: FD and DVARS over time</li> <li>aCompCor plots: Component time series and variance</li> <li>Censor visualization: Time points marked for exclusion</li> <li>Processing summary: Steps completed, warnings, errors</li> </ul>"},{"location":"user-guide/qc/#report-anatomy","title":"Report Anatomy","text":"<pre><code>reports/\n\u2514\u2500\u2500 sub-01_ses-01_task-rest_run-01_desc-qc_report.html\n</code></pre> <p>The report contains:</p> <ol> <li>Header: Subject information, processing parameters</li> <li>Motion Section: FD and DVARS plots</li> <li>Signal Section: SNR, global signal plots</li> <li>Confounds Section: aCompCor components</li> <li>Censor Section: Censor mask visualization</li> <li>Summary: Quantitative metrics and recommendations</li> </ol>"},{"location":"user-guide/qc/#qc-gallery","title":"QC Gallery","text":"<p>Here are examples of QC visualizations from the SpinePrep test fixture:</p>"},{"location":"user-guide/qc/#motion-plots","title":"Motion Plots","text":"<ul> <li> <p> Framewise Displacement</p> <p>Shows motion over time with threshold lines</p> <p></p> </li> <li> <p> DVARS</p> <p>Shows signal stability over time</p> <p></p> </li> </ul>"},{"location":"user-guide/qc/#signal-quality","title":"Signal Quality","text":"<ul> <li> <p> Global Signal</p> <p>Mean signal across all voxels</p> <p></p> </li> <li> <p> SNR Map</p> <p>Signal-to-noise ratio across the image</p> <p></p> </li> </ul>"},{"location":"user-guide/qc/#confound-components","title":"Confound Components","text":"<ul> <li> <p> aCompCor Components</p> <p>First 6 anatomical CompCor components</p> <p></p> </li> <li> <p> Censor Mask</p> <p>Time points marked for exclusion</p> <p></p> </li> </ul>"},{"location":"user-guide/qc/#qc-thresholds","title":"QC Thresholds","text":""},{"location":"user-guide/qc/#default-thresholds","title":"Default Thresholds","text":"<pre><code>qc:\n  motion:\n    fd_threshold: 0.5  # mm\n    dvars_threshold: 75\n  signal:\n    snr_threshold: 10\n  confounds:\n    acompcor_n_components: 6\n    censor_threshold: 0.5\n</code></pre>"},{"location":"user-guide/qc/#customizing-thresholds","title":"Customizing Thresholds","text":"<p>You can adjust QC thresholds in your configuration:</p> <pre><code># config.yaml\nqc:\n  motion:\n    fd_threshold: 0.3  # More strict\n    dvars_threshold: 50\n  signal:\n    snr_threshold: 15\n  confounds:\n    acompcor_n_components: 8\n    censor_threshold: 0.3\n</code></pre>"},{"location":"user-guide/qc/#qc-recommendations","title":"QC Recommendations","text":""},{"location":"user-guide/qc/#good-quality-data","title":"Good Quality Data","text":"<ul> <li>FD &lt; 0.3 mm for &gt; 90% of time points</li> <li>DVARS &lt; 50 for &gt; 90% of time points</li> <li>SNR &gt; 15</li> <li>Censor percentage &lt; 5%</li> </ul>"},{"location":"user-guide/qc/#moderate-quality-data","title":"Moderate Quality Data","text":"<ul> <li>FD &lt; 0.5 mm for &gt; 80% of time points</li> <li>DVARS &lt; 75 for &gt; 80% of time points</li> <li>SNR &gt; 10</li> <li>Censor percentage &lt; 15%</li> </ul>"},{"location":"user-guide/qc/#poor-quality-data","title":"Poor Quality Data","text":"<ul> <li>FD &gt; 0.5 mm for &gt; 20% of time points</li> <li>DVARS &gt; 75 for &gt; 20% of time points</li> <li>SNR &lt; 10</li> <li>Censor percentage &gt; 20%</li> </ul>"},{"location":"user-guide/qc/#troubleshooting-qc-issues","title":"Troubleshooting QC Issues","text":""},{"location":"user-guide/qc/#high-motion","title":"High Motion","text":"<p>Symptoms: High FD, many censored time points Solutions: - Check for participant movement during scanning - Consider motion correction parameters - Use stricter motion thresholds</p>"},{"location":"user-guide/qc/#poor-signal-quality","title":"Poor Signal Quality","text":"<p>Symptoms: Low SNR, high DVARS Solutions: - Check for scanner artifacts - Verify preprocessing steps - Consider different preprocessing parameters</p>"},{"location":"user-guide/qc/#excessive-censoring","title":"Excessive Censoring","text":"<p>Symptoms: High censor percentage Solutions: - Adjust motion thresholds - Check for systematic issues - Consider excluding problematic runs</p>"},{"location":"user-guide/qc/#qc-in-analysis","title":"QC in Analysis","text":""},{"location":"user-guide/qc/#using-qc-metrics","title":"Using QC Metrics","text":"<p>Include QC metrics in your analysis:</p> <pre><code>import pandas as pd\n\n# Load confounds\nconfounds = pd.read_csv('desc-confounds_timeseries.tsv', sep='\\t')\n\n# Use motion parameters as regressors\nmotion_regressors = confounds[['trans_x', 'trans_y', 'trans_z',\n                              'rot_x', 'rot_y', 'rot_z']]\n\n# Use aCompCor components\nacompcor_regressors = confounds[['acompcor_00', 'acompcor_01',\n                                 'acompcor_02', 'acompcor_03']]\n</code></pre>"},{"location":"user-guide/qc/#excluding-poor-quality-data","title":"Excluding Poor Quality Data","text":"<pre><code># Load censor mask\ncensor_mask = nib.load('desc-censor_mask.nii.gz').get_fdata()\n\n# Apply censor mask to data\ndata_censored = data[~censor_mask.astype(bool)]\n</code></pre>"},{"location":"user-guide/registration/","title":"Registration","text":"<p>SpinePrep uses spinal cord-specific registration methods to align data to standard space. This guide explains the registration pipeline, methods, and quality assessment.</p>"},{"location":"user-guide/registration/#registration-pipeline","title":"Registration Pipeline","text":"<p>SpinePrep follows a multi-step registration process:</p> <ol> <li>Spinal cord segmentation: Identify spinal cord boundaries</li> <li>Vertebral level detection: Identify vertebral levels</li> <li>Template registration: Align to standard space (PAM50)</li> <li>Quality assessment: Evaluate registration quality</li> </ol>"},{"location":"user-guide/registration/#registration-methods","title":"Registration Methods","text":""},{"location":"user-guide/registration/#sct-guided-registration","title":"SCT-Guided Registration","text":"<p>SpinePrep primarily uses the Spinal Cord Toolbox (SCT) for registration:</p> <pre><code># Spinal cord segmentation\nsct_deepseg_sc -i T2w.nii.gz -c t2\n\n# Vertebral level detection\nsct_label_vertebrae -i T2w.nii.gz -s cord_seg.nii.gz\n\n# Template registration\nsct_register_to_template -i T2w.nii.gz -s cord_seg.nii.gz -l labels.nii.gz\n</code></pre>"},{"location":"user-guide/registration/#registration-steps","title":"Registration Steps","text":"<ol> <li>Preprocessing:</li> <li>Bias field correction</li> <li>Intensity normalization</li> <li> <p>Cropping to spinal cord region</p> </li> <li> <p>Segmentation:</p> </li> <li>Spinal cord segmentation using deep learning</li> <li>Vertebral level labeling</li> <li> <p>Quality control of segmentation</p> </li> <li> <p>Registration:</p> </li> <li>Affine registration to template</li> <li>Non-linear registration (if specified)</li> <li>Quality assessment</li> </ol>"},{"location":"user-guide/registration/#template-spaces","title":"Template Spaces","text":""},{"location":"user-guide/registration/#pam50-template","title":"PAM50 Template","text":"<p>The PAM50 template is the standard space for spinal cord imaging:</p> <ul> <li>Resolution: 0.5 \u00d7 0.5 \u00d7 0.5 mm</li> <li>Coverage: C1-C7 vertebral levels</li> <li>Orientation: RPI (Right-Posterior-Inferior)</li> </ul>"},{"location":"user-guide/registration/#template-files","title":"Template Files","text":"<pre><code>templates/\n\u251c\u2500\u2500 PAM50/\n\u2502   \u251c\u2500\u2500 PAM50_t2.nii.gz          # T2-weighted template\n\u2502   \u251c\u2500\u2500 PAM50_cord.nii.gz         # Spinal cord mask\n\u2502   \u251c\u2500\u2500 PAM50_levels.nii.gz       # Vertebral level labels\n\u2502   \u2514\u2500\u2500 PAM50_cord_labeled.nii.gz # Labeled spinal cord\n</code></pre>"},{"location":"user-guide/registration/#registration-quality","title":"Registration Quality","text":""},{"location":"user-guide/registration/#quality-metrics","title":"Quality Metrics","text":"<p>SpinePrep assesses registration quality using:</p> <ul> <li>Dice coefficient: Overlap between registered and template masks</li> <li>Hausdorff distance: Maximum distance between boundaries</li> <li>Jacobian determinant: Local volume changes</li> <li>Visual inspection: Overlay of registered and template images</li> </ul>"},{"location":"user-guide/registration/#quality-thresholds","title":"Quality Thresholds","text":"<pre><code>registration:\n  quality:\n    dice_threshold: 0.8\n    hausdorff_threshold: 2.0\n    jacobian_threshold: 0.5\n</code></pre>"},{"location":"user-guide/registration/#quality-assessment","title":"Quality Assessment","text":"<pre><code># Calculate Dice coefficient\ndice = dice_coefficient(registered_mask, template_mask)\n\n# Calculate Hausdorff distance\nhausdorff = hausdorff_distance(registered_boundary, template_boundary)\n\n# Check Jacobian determinant\njacobian = calculate_jacobian(transform)\njacobian_valid = (jacobian &gt; 0.5).all()\n</code></pre>"},{"location":"user-guide/registration/#registration-workflow","title":"Registration Workflow","text":""},{"location":"user-guide/registration/#step-1-spinal-cord-segmentation","title":"Step 1: Spinal Cord Segmentation","text":"<pre><code># Deep learning segmentation\nsct_deepseg_sc -i T2w.nii.gz -c t2 -o cord_seg.nii.gz\n\n# Quality control\nsct_qc -i T2w.nii.gz -s cord_seg.nii.gz -p sct_deepseg_sc\n</code></pre>"},{"location":"user-guide/registration/#step-2-vertebral-level-detection","title":"Step 2: Vertebral Level Detection","text":"<pre><code># Label vertebrae\nsct_label_vertebrae -i T2w.nii.gz -s cord_seg.nii.gz -o labels.nii.gz\n\n# Quality control\nsct_qc -i T2w.nii.gz -s labels.nii.gz -p sct_label_vertebrae\n</code></pre>"},{"location":"user-guide/registration/#step-3-template-registration","title":"Step 3: Template Registration","text":"<pre><code># Register to template\nsct_register_to_template -i T2w.nii.gz -s cord_seg.nii.gz -l labels.nii.gz -o T2w_reg.nii.gz\n\n# Quality control\nsct_qc -i T2w_reg.nii.gz -s cord_seg_reg.nii.gz -p sct_register_to_template\n</code></pre>"},{"location":"user-guide/registration/#registration-parameters","title":"Registration Parameters","text":""},{"location":"user-guide/registration/#affine-registration","title":"Affine Registration","text":"<pre><code>registration:\n  affine:\n    method: \"flirt\"  # or \"ants\"\n    cost_function: \"mutualinfo\"\n    dof: 12\n    search_angles: [45, 45, 45]\n    search_translations: [10, 10, 10]\n</code></pre>"},{"location":"user-guide/registration/#non-linear-registration","title":"Non-linear Registration","text":"<pre><code>registration:\n  nonlinear:\n    method: \"ants\"\n    transformation: \"SyN\"\n    metric: \"CC\"\n    iterations: [100, 50, 25]\n    shrink_factors: [2, 1, 1]\n    smoothing_sigmas: [1, 0.5, 0]\n</code></pre>"},{"location":"user-guide/registration/#registration-outputs","title":"Registration Outputs","text":""},{"location":"user-guide/registration/#registered-images","title":"Registered Images","text":"<ul> <li>T2w_reg.nii.gz: T2-weighted image in template space</li> <li>cord_seg_reg.nii.gz: Spinal cord segmentation in template space</li> <li>labels_reg.nii.gz: Vertebral level labels in template space</li> </ul>"},{"location":"user-guide/registration/#transform-files","title":"Transform Files","text":"<ul> <li>T2w_to_template_affine.mat: Affine transformation matrix</li> <li>T2w_to_template_warp.nii.gz: Non-linear warp field (if used)</li> <li>template_to_T2w_affine.mat: Inverse affine transformation</li> <li>template_to_T2w_warp.nii.gz: Inverse non-linear warp field</li> </ul>"},{"location":"user-guide/registration/#quality-reports","title":"Quality Reports","text":"<ul> <li>registration_quality.json: Quantitative quality metrics</li> <li>registration_quality.html: Visual quality assessment</li> <li>registration_plots.png: Registration visualization plots</li> </ul>"},{"location":"user-guide/registration/#registration-visualization","title":"Registration Visualization","text":""},{"location":"user-guide/registration/#overlay-plots","title":"Overlay Plots","text":"<p>SpinePrep generates overlay plots showing:</p> <ul> <li>Registered image overlaid on template</li> <li>Segmentation boundaries</li> <li>Vertebral level labels</li> <li>Quality metrics</li> </ul>"},{"location":"user-guide/registration/#quality-plots","title":"Quality Plots","text":"<ul> <li>Dice coefficient over time</li> <li>Hausdorff distance distribution</li> <li>Jacobian determinant maps</li> <li>Registration error maps</li> </ul>"},{"location":"user-guide/registration/#troubleshooting-registration","title":"Troubleshooting Registration","text":""},{"location":"user-guide/registration/#common-issues","title":"Common Issues","text":"<p>Issue: Poor segmentation quality Solutions: - Check image quality and contrast - Verify SCT installation - Try different segmentation parameters</p> <p>Issue: Registration failure Solutions: - Check template compatibility - Verify segmentation quality - Try different registration parameters</p> <p>Issue: Poor registration quality Solutions: - Check initial alignment - Verify template space - Consider different registration methods</p>"},{"location":"user-guide/registration/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed registration information:</p> <pre><code>spineprep --debug config.yaml\n</code></pre> <p>This will show: - Registration command details - Intermediate file paths - Quality metric calculations - Error messages</p>"},{"location":"user-guide/registration/#registration-best-practices","title":"Registration Best Practices","text":""},{"location":"user-guide/registration/#preprocessing","title":"Preprocessing","text":"<ol> <li>Bias field correction: Essential for good registration</li> <li>Intensity normalization: Helps with template matching</li> <li>Cropping: Focus on spinal cord region</li> </ol>"},{"location":"user-guide/registration/#quality-control","title":"Quality Control","text":"<ol> <li>Visual inspection: Always check registration visually</li> <li>Quantitative metrics: Use Dice and Hausdorff distances</li> <li>Template validation: Verify template space and orientation</li> </ol>"},{"location":"user-guide/registration/#parameter-tuning","title":"Parameter Tuning","text":"<ol> <li>Start with defaults: Use recommended parameters</li> <li>Iterative refinement: Adjust based on quality metrics</li> <li>Subject-specific tuning: Adapt parameters for difficult cases</li> </ol>"},{"location":"user-guide/registration/#registration-in-analysis","title":"Registration in Analysis","text":""},{"location":"user-guide/registration/#using-registration-outputs","title":"Using Registration Outputs","text":"<pre><code>import nibabel as nib\n\n# Load registered image\nimg_reg = nib.load('T2w_reg.nii.gz')\ndata_reg = img_reg.get_fdata()\n\n# Load segmentation\nseg_reg = nib.load('cord_seg_reg.nii.gz')\nmask_reg = seg_reg.get_fdata() &gt; 0\n\n# Apply mask\ndata_masked = data_reg[mask_reg]\n</code></pre>"},{"location":"user-guide/registration/#coordinate-systems","title":"Coordinate Systems","text":"<p>SpinePrep uses standard neuroimaging coordinate systems:</p> <ul> <li>Template space: PAM50 (RPI orientation)</li> <li>Subject space: Original image orientation</li> <li>Transform files: FSL/ANTs compatible</li> </ul>"},{"location":"user-guide/registration/#transform-applications","title":"Transform Applications","text":"<pre><code># Apply transform to image\nfrom sct_utils import apply_transfo\n\n# Forward transform (subject to template)\nimg_reg = apply_transfo(img_subject, warp_file, template_file)\n\n# Inverse transform (template to subject)\nimg_subject = apply_transfo(img_template, warp_inv_file, subject_file)\n</code></pre>"},{"location":"user-guide/usage/","title":"Usage Guide","text":"<p>This guide covers advanced usage of SpinePrep, including configuration options, command-line interface, and workflow customization.</p>"},{"location":"user-guide/usage/#command-line-interface","title":"Command Line Interface","text":""},{"location":"user-guide/usage/#basic-usage","title":"Basic Usage","text":"<pre><code>spineprep [OPTIONS] CONFIG_FILE\n</code></pre>"},{"location":"user-guide/usage/#options","title":"Options","text":"<ul> <li><code>--version</code>: Show version information</li> <li><code>--help</code>: Show help message</li> <li><code>--dry-run</code>: Show what would be executed without running</li> <li><code>--verbose</code>: Enable verbose output</li> <li><code>--debug</code>: Enable debug mode</li> </ul>"},{"location":"user-guide/usage/#examples","title":"Examples","text":"<pre><code># Basic run\nspineprep config.yaml\n\n# Dry run to see what would be executed\nspineprep --dry-run config.yaml\n\n# Verbose output\nspineprep --verbose config.yaml\n</code></pre>"},{"location":"user-guide/usage/#configuration","title":"Configuration","text":"<p>SpinePrep uses YAML configuration files. Here's a complete example:</p> <pre><code># Basic settings\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\nwork_dir: /tmp/spineprep_work\n\n# Processing options\nn_procs: 4\nmemory_gb: 8\nomp_nthreads: 2\n\n# Subject selection\nparticipant_label: [\"sub-01\", \"sub-02\"]\nsession_label: [\"ses-01\"]\n\n# Processing steps\nsteps:\n  motion: true\n  confounds: true\n  registration: true\n  segmentation: true\n\n# Motion correction\nmotion:\n  fd_threshold: 0.5\n  dvars_threshold: 75\n\n# Confounds\nconfounds:\n  acompcor: true\n  censor: true\n  censor_threshold: 0.5\n\n# Registration\nregistration:\n  method: \"sct\"\n  template: \"PAM50\"\n</code></pre>"},{"location":"user-guide/usage/#processing-pipeline","title":"Processing Pipeline","text":"<p>SpinePrep follows a standardized processing pipeline:</p> <p><code>mermaid graph TD     A[BIDS Input] --&gt; B[Motion Correction]     B --&gt; C[Confounds Extraction]     C --&gt; D[Registration]     D --&gt; E[Segmentation]     E --&gt; F[Quality Control]     F --&gt; G[BIDS Derivatives]</code></p>"},{"location":"user-guide/usage/#step-details","title":"Step Details","text":"<ol> <li>Motion Correction: Realign volumes to reduce motion artifacts</li> <li>Confounds Extraction: Extract motion parameters, FD, DVARS, and aCompCor</li> <li>Registration: Register to standard space (PAM50)</li> <li>Segmentation: Segment spinal cord and vertebral levels</li> <li>Quality Control: Generate QC metrics and reports</li> </ol>"},{"location":"user-guide/usage/#manifests-and-samples","title":"Manifests and Samples","text":"<p>SpinePrep uses manifest files to track processing status and samples:</p>"},{"location":"user-guide/usage/#samples-file","title":"Samples File","text":"<p>The <code>samples.tsv</code> file contains information about each subject/session:</p> <pre><code>participant_id  session_id  task_id run_id  space   desc    path\nsub-01  ses-01  task-rest   run-01  orig    preproc sub-01/ses-01/func/sub-01_ses-01_task-rest_run-01_bold.nii.gz\n</code></pre>"},{"location":"user-guide/usage/#manifest-file","title":"Manifest File","text":"<p>The <code>manifest_deriv.tsv</code> file tracks derivative files:</p> <pre><code>path    desc    space   res den tr  ts  acq rec dir run modality    chunk   part    ext\nsub-01/ses-01/func/sub-01_ses-01_task-rest_run-01_bold.nii.gz   preproc orig    2.0 0.0 2.0 0.0 0.0 0.0 0.0 1.0 func    0.0 0.0 .nii.gz\n</code></pre>"},{"location":"user-guide/usage/#examples_1","title":"Examples","text":""},{"location":"user-guide/usage/#basic-preprocessing","title":"Basic Preprocessing","text":"<pre><code># config_basic.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\nn_procs: 4\n</code></pre>"},{"location":"user-guide/usage/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># config_advanced.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\nwork_dir: /tmp/spineprep_work\n\n# Subject selection\nparticipant_label: [\"sub-01\", \"sub-02\", \"sub-03\"]\nsession_label: [\"ses-01\"]\n\n# Processing options\nn_procs: 8\nmemory_gb: 16\nomp_nthreads: 4\n\n# Motion correction\nmotion:\n  fd_threshold: 0.5\n  dvars_threshold: 75\n  scrub: true\n\n# Confounds\nconfounds:\n  acompcor: true\n  acompcor_n_components: 6\n  censor: true\n  censor_threshold: 0.5\n\n# Registration\nregistration:\n  method: \"sct\"\n  template: \"PAM50\"\n  crop: true\n\n# Quality control\nqc:\n  generate_report: true\n  report_format: \"html\"\n</code></pre>"},{"location":"user-guide/usage/#hpc-configuration","title":"HPC Configuration","text":"<pre><code># config_hpc.yaml\nbids_dir: /data/bids\noutput_dir: /data/derivatives/spineprep\n\n# Execution backend\nexecution:\n  backend: slurm\n  slurm:\n    account: your_account\n    partition: compute\n    time: \"4:00:00\"\n    mem: \"16G\"\n    cpus: 8\n    nodes: 1\n</code></pre>"},{"location":"user-guide/usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/usage/#common-issues","title":"Common Issues","text":"<p>Issue: Out of memory errors Solution: Reduce <code>memory_gb</code> or <code>n_procs</code> in your configuration.</p> <p>Issue: FSL commands not found Solution: Ensure FSL is properly installed and sourced: <code>source /usr/local/fsl/etc/fslconf/fsl.sh</code>.</p> <p>Issue: SCT commands not found Solution: Install Spinal Cord Toolbox and ensure it's in your PATH.</p> <p>Issue: Permission denied errors Solution: Check that you have write permissions to the output directory.</p>"},{"location":"user-guide/usage/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed logging:</p> <pre><code>spineprep --debug config.yaml\n</code></pre> <p>This will show: - Detailed command execution - Intermediate file paths - Memory usage - Processing times</p>"},{"location":"user-guide/usage/#dry-run","title":"Dry Run","text":"<p>Use dry run to see what would be executed:</p> <pre><code>spineprep --dry-run config.yaml\n</code></pre> <p>This shows: - Which subjects will be processed - What steps will be run - Estimated processing time - Resource requirements</p>"}]}